import 'package:flutter/material.dart';
import 'package:eamar_user_app/data/model/response/language_model.dart';
import 'package:eamar_user_app/provider/search_provider.dart';
import 'package:eamar_user_app/utill/app_constants.dart';
import 'package:eamar_user_app/utill/color_resources.dart';
import 'package:eamar_user_app/utill/custom_themes.dart';
import 'package:eamar_user_app/utill/dimensions.dart';
import 'package:flutter_speech/flutter_speech.dart';
import 'package:provider/provider.dart';


class SearchWidget extends StatefulWidget {
  final String hintText;
  final Function onTextChanged;
  final Function onClearPressed;
  final Function onSubmit;
  final bool isSeller;
  SearchWidget({@required this.hintText, this.onTextChanged, @required this.onClearPressed, this.onSubmit, this.isSeller= false});

  @override
  State<SearchWidget> createState() => _SearchWidgetState();
}

class _SearchWidgetState extends State<SearchWidget> {
   SpeechRecognition _speech;

  bool _speechRecognitionAvailable = false;
  bool _isListening = false;

  String transcription = '';

  //String _currentLocale = 'en_US';
  LanguageModel selectedLang = AppConstants.languages.first;


@override
void initState() { 
  super.initState();
  activateSpeechRecognizer();
}
// Platform messages are asynchronous, so we initialize in an async method.
  void activateSpeechRecognizer() {
    print('_MyAppState.activateSpeechRecognizer... ');

     _speech = SpeechRecognition();

    _speech = SpeechRecognition();
    _speech.setAvailabilityHandler(onSpeechAvailability);
    _speech.setRecognitionStartedHandler(onRecognitionStarted);
    _speech.setRecognitionResultHandler(onRecognitionResult);
    _speech.setRecognitionCompleteHandler(onRecognitionComplete);
    _speech.setErrorHandler(errorHandler);
    _speech.activate('fr_FR').then((res) {
      setState(() => _speechRecognitionAvailable = res);
    });
  }
  

  void _selectLangHandler(LanguageModel lang) {
    setState(() => selectedLang = lang);
  }

  Widget _buildButton({ String label, VoidCallback onPressed}) => Padding(
      padding: EdgeInsets.all(12.0),
      child: ElevatedButton(
        onPressed: onPressed,
        child: Text(
          label,
          style: const TextStyle(color: Colors.white),
        ),
      ));

  void start() => _speech.activate(selectedLang.languageCode).then((_) {
        return _speech.listen().then((result) {
          print('_MyAppState.start => result $result');
          setState(() {
            _isListening = result;
          });
        });
      });

  void cancel() =>
      _speech.cancel().then((_) => setState(() => _isListening = false));

  void stop() => _speech.stop().then((_) {
        setState(() => _isListening = false);
      });

  void onSpeechAvailability(bool result) =>
      setState(() => _speechRecognitionAvailable = result);

  void onCurrentLocale(String locale) {
    print('_MyAppState.onCurrentLocale... $locale');
    setState(
        () => selectedLang = AppConstants.languages.firstWhere((l) => l.languageCode == locale));
  }

  void onRecognitionStarted() {
    setState(() => _isListening = true);
  }

  void onRecognitionResult(String text) {
    print('_MyAppState.onRecognitionResult... $text');
    setState(() => transcription = text);
  }

  void onRecognitionComplete(String text) {
    print('_MyAppState.onRecognitionComplete... $text');
    setState(() => _isListening = false);
  }

  void errorHandler() => activateSpeechRecognizer();
  @override
  Widget build(BuildContext context) {
    final TextEditingController _controller = TextEditingController(text: Provider.of<SearchProvider>(context).searchText);
    return Stack(children: [
      ClipRRect(
        child: Container(
          height: widget.isSeller? 50 : 80 + MediaQuery.of(context).padding.top,
          width: MediaQuery.of(context).size.width,
        ),
      ),

      Padding(
        padding: const EdgeInsets.all(8.0),
        child: Container(width : MediaQuery.of(context).size.width,
          height: widget.isSeller? 50 : 60,
          alignment: Alignment.center,
          child: Row(children: [
            Expanded(
              child: Container(
                decoration: BoxDecoration(
                    color: Theme.of(context).cardColor,
                    borderRadius: BorderRadius.only(topLeft: Radius.circular(Dimensions.PADDING_SIZE_SMALL),
                        bottomLeft: Radius.circular(Dimensions.PADDING_SIZE_SMALL))
                ),
                child: Padding(
                  padding: const EdgeInsets.symmetric(vertical: Dimensions.PADDING_SIZE_DEFAULT, horizontal: Dimensions.PADDING_SIZE_SMALL),
                  child: TextFormField(
                    controller: _controller,
                    onFieldSubmitted: (query) {
                      widget.onSubmit(query);
                    },
                    onChanged: (query) {
                      widget.onTextChanged(query);
                    },
                    textInputAction: TextInputAction.search,
                    maxLines: 1,
                    textAlignVertical: TextAlignVertical.center,
                    decoration: InputDecoration(
                      hintText: widget.hintText,
                      isDense: true,
                      hintStyle: robotoRegular.copyWith(color: Theme.of(context).hintColor),
                      border: InputBorder.none,
                      prefixIcon: IconButton(onPressed: (){
_selectLangHandler(
  
);
                      }, icon: Icon(Icons.keyboard_voice_outlined)),
                      //prefixIcon: Icon(Icons.search, color: ColorResources.getColombiaBlue(context), size: Dimensions.ICON_SIZE_DEFAULT),
                      suffixIcon: Provider.of<SearchProvider>(context).searchText.isNotEmpty ? IconButton(
                        icon: Icon(Icons.clear, color: Colors.black),
                        onPressed: () {
                          widget.onClearPressed();
                          _controller.clear();
                        },
                      ) : _controller.text.isNotEmpty ? IconButton(
                        icon: Icon(Icons.clear, color: ColorResources.getChatIcon(context)),
                        onPressed: () {
                          widget.onClearPressed();
                          _controller.clear();
                        },
                      ) : null,
                    ),
                  ),
                ),

              ),
            ),
            InkWell(
              onTap: (){
                Provider.of<SearchProvider>(context, listen: false).saveSearchAddress( _controller.text.toString());
                Provider.of<SearchProvider>(context, listen: false).searchProduct( _controller.text.toString(), context);
              },
              child: Container(
                width: 55,height: 55,decoration: BoxDecoration(color: Theme.of(context).primaryColor,
                  borderRadius: BorderRadius.only(topRight: Radius.circular(Dimensions.PADDING_SIZE_SMALL),
                      bottomRight: Radius.circular(Dimensions.PADDING_SIZE_SMALL))
              ),
                child: Icon(Icons.search, color: Theme.of(context).cardColor, size: Dimensions.ICON_SIZE_SMALL),
              ),
            ),
            SizedBox(width: 10),
          ]),
        ),
      ),
    ]);
  }
}




//alert dialog
AlertDialog( 
        title: Text('TextField in Dialog'), 
        content: TextField( 
          onChanged: (value) { }, 
          controller: _textFieldController, 
          decoration: InputDecoration(hintText: "Text Field in Dialog"), 
        ),
    ),

    Future<void> _displayTextInputDialog(BuildContext context) async {
  return showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('TextField in Dialog'),
          content: TextField(
            onChanged: (value) {
     
            },
            controller: _textFieldController,
            decoration: InputDecoration(hintText: "Text Field in Dialog"),
          ),


                     actions: <Widget>[
             FlatButton(
               color: Colors.green,
               textColor: Colors.white,
               child: Text('OK'),
               onPressed: () {
                 setState(() {
                   codeDialog = valueText;
                   Navigator.pop(context);
                 });
               },
             ),
  
           ]
        );
      });
}






Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  Expanded(
                      child: Container(
                          padding: const EdgeInsets.all(8.0),
                          color: Colors.grey.shade200,
                          child: Text(transcription))),
                  _buildButton(
                    onPressed: _speechRecognitionAvailable && !_isListening
                        ? () => start()
                        : null,
                    label: _isListening
                        ? 'Listening...'
                        : 'Listen (${selectedLang.code})',
                  ),
                  _buildButton(
                    onPressed: _isListening ? () => cancel() : null,
                    label: 'Cancel',
                  ),
                  _buildButton(
                    onPressed: _isListening ? () => stop() : null,
                    label: 'Stop',
                  ),
                ],

























                final dynamicLinkParams = DynamicLinkParameters(
  link: Uri.parse("https://www.example.com/"),
  uriPrefix: "https://example.page.link",
  androidParameters: const AndroidParameters(packageName: "com.example.app.android"),
  iosParameters: const IOSParameters(bundleId: "com.example.app.ios"),
);
final dynamicLink =
    await FirebaseDynamicLinks.instance.buildLink(dynamicLinkParams);
